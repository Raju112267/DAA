#include <stdio.h>

#define MAX_ROWS 10
#define MAX_COLS 10

void multiply_matrices(float m1[][MAX_COLS], int rows1, int cols1, float m2[][MAX_COLS], int rows2, int cols2, float result[][MAX_COLS]) {
   int i, j, k;
   
   for (i = 0; i < rows1; i++) {
      for (j = 0; j < cols2; j++) {
         result[i][j] = 0;
         for (k = 0; k < cols1; k++) {
            result[i][j] += m1[i][k] * m2[k][j];
         }
      }
   }
}

int main() {
   float matrix1[MAX_ROWS][MAX_COLS], matrix2[MAX_ROWS][MAX_COLS], result[MAX_ROWS][MAX_COLS];
   int rows1, cols1, rows2, cols2;
   int i, j;

   // Get the dimensions of the first matrix
   printf("Enter the number of rows and columns of matrix 1: ");
   scanf("%d %d", &rows1, &cols1);

   // Get the elements of the first matrix
   printf("Enter the elements of matrix 1:\n");
   for (i = 0; i < rows1; i++) {
      for (j = 0; j < cols1; j++) {
         scanf("%f", &matrix1[i][j]);
      }
   }

   // Get the dimensions of the second matrix
   printf("Enter the number of rows and columns of matrix 2: ");
   scanf("%d %d", &rows2, &cols2);

   // Get the elements of the second matrix
   printf("Enter the elements of matrix 2:\n");
   for (i = 0; i < rows2; i++) {
      for (j = 0; j < cols2; j++) {
         scanf("%f", &matrix2[i][j]);
      }
   }

   // Check if the matrices can be multiplied
   if (cols1 != rows2) {
      printf("Error: The matrices cannot be multiplied\n");
      return 1;
   }

   // Multiply the matrices
   multiply_matrices(matrix1, rows1, cols1, matrix2, rows2, cols2, result);

   // Display the result
   printf("The product of the matrices is:\n");
   for (i = 0; i < rows1; i++) {
      for (j = 0; j < cols2; j++) {
         printf("%.2f ", result[i][j]);
      }
      printf("\n");
   }

   return 0;
}
